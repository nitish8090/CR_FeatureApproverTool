# -*- coding: utf-8 -*-
"""
/***************************************************************************
 sdafDockWidget
                                 A QGIS plugin
 sdf
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-10-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by dasf
        email                : adsf
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import datetime
import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, Qt

from PyQt5.QtCore import QVariant
from PyQt5.QtGui import QImage, QIcon, QPixmap, QPalette, QBrush, QColor, QFontDatabase, QFont

from qgis.core import QgsProject, QgsMapLayer, QgsField, edit, QgsPalLayerSettings, QgsTextFormat, \
    QgsVectorLayerSimpleLabeling, QgsTextBufferSettings
from qgis.utils import iface

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'cr_feature_approver_dockwidget_base.ui'))


class CRFeatureApproverDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(CRFeatureApproverDockWidget, self).__init__(parent)
        self.setupUi(self)

        self.selected_layer = None
        self.selected_feature = None

        # UI Conncetions
        # self.combobox_layers
        # self.cbox_roof_t.addItems(['Flat', 'Gable', 'Mix', 'Hip', 'Other'])
        # self.cbox_roof_c.addItems(['Good', 'Fair', 'Bad', 'Damaged'])
        # self.cbox_roof_m.addItems(['Asphalt', 'Tile', 'Shingle', 'Metal', 'Other'])

        # self.cbox_roof_t.currentTextChanged.connect(self.check_is_dirty)
        # self.cbox_roof_c.currentTextChanged.connect(self.check_is_dirty)
        # self.cbox_roof_m.currentTextChanged.connect(self.check_is_dirty)

        # Button Connections
        self.btn_accept.clicked.connect(self.accept)
        self.btn_corrected.clicked.connect(self.corrected)
        self.btn_delete.clicked.connect(self.delete)
        self.btn_skip.clicked.connect(self.skip)

        self.btn_refresh_layer.clicked.connect(self.refresh_layer_list)
        self.btn_select_layer.clicked.connect(self.start_work)
        self.btn_stop_work.clicked.connect(self.stop_work)

        self.btn_zoom_to_current_feature.clicked.connect(self.zoom_to_current_feature)
        self.btn_update_attribute.clicked.connect(self.update_attribute_btn_click)
        self.cbox_attribute.addItems(['Good', 'Fair', 'Bad', 'Damaged'])
        # self.lbl_current_attribute

        # self.btn_next.clicked.connect(self.next)
        # self.btn_previous.clicked.connect(self.previous)
        # self.btn_approve_next.clicked.connect(self.approve_and_next)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def refresh_layer_list(self):
        """ Update the layer list in combo box"""
        print("Refreshing Layer List")

        self.combobox_layers.clear()
        for layer in QgsProject.instance().mapLayers().values():
            layer_name = layer.name()
            if layer.type() == QgsMapLayer.VectorLayer:
                self.combobox_layers.addItem(layer_name)
                print(f"{layer_name} | Added to combo box")

    def start_work(self):
        """ Select the layer and start the work"""
        print("Selecting Layer")

        content = self.combobox_layers.currentText()
        layers = QgsProject.instance().mapLayersByName(content)
        if len(layers) > 1:
            print(f"[WARNING] More than one layer with name {content}")

        self.selected_layer = SelectedLayer(layers[0])
        self.selected_layer.enable_labels()
        self.selected_layer.validate()
        self.selected_layer.read_indexes()

        # Disable layer selection buttons
        self.btn_select_layer.setEnabled(False)
        self.btn_refresh_layer.setEnabled(False)
        self.combobox_layers.setEnabled(False)
        self.btn_stop_work.setEnabled(True) # Enable stop work button

        # Enable Attribute Updator Buttons
        self.cbox_attribute.setEnabled(True)
        self.btn_update_attribute.setEnabled(True)

        # Enable approver buttons
        self.btn_accept.setEnabled(True)
        self.btn_corrected.setEnabled(True)
        self.btn_delete.setEnabled(True)
        self.btn_skip.setEnabled(True)

        # Enable zoom to current feature
        self.btn_zoom_to_current_feature.setEnabled(True)

        # Get and Zoom to first feature
        self.selected_feature = self.selected_layer.get_next_feature()
        zoom_to_a_feature(self.selected_feature)

    def stop_work(self):
        self.selected_layer.layer.removeSelection()

        self.selected_layer = None
        self.selected_feature = None

        self.btn_select_layer.setEnabled(True)
        self.btn_refresh_layer.setEnabled(True)
        self.combobox_layers.setEnabled(True)

        # Enable Attribute Updator Buttons
        self.cbox_attribute.setEnabled(False)
        self.btn_update_attribute.setEnabled(False)

        # Enable approver buttons
        self.btn_accept.setEnabled(False)
        self.btn_corrected.setEnabled(False)
        self.btn_delete.setEnabled(False)
        self.btn_skip.setEnabled(False)
        self.btn_zoom_to_current_feature.setEnabled(False)

        self.btn_stop_work.setEnabled(False)

    def update_attribute_btn_click(self):
        print("Updating Attribute")
        if self.selected_layer.layer.isEditable():
            print("\tLayer is already in edit mode")
            self.selected_layer.layer.changeAttributeValue(self.selected_feature.id(),
                                                           self.selected_layer.index_of_cc_roof_c,
                                                           self.cbox_attribute.currentText())
        else:
            print("\tLayer is not in edit mode")
            with edit(self.selected_layer.layer):
                future_new_value = self.cbox_attribute.currentText()
                print(f"\tChanging to: {future_new_value}")
                self.selected_layer.layer.changeAttributeValue(self.selected_feature.id(),
                                                               self.selected_layer.index_of_cc_roof_c,
                                                               future_new_value)
        self.lbl_current_attribute.setText(self.cbox_attribute.currentText())

    def accept(self):
        self.update_feature(self.selected_feature, status='Accepted')
        self.selected_feature = self.selected_layer.get_next_feature()
        zoom_to_a_feature(self.selected_feature)

        self.lbl_current_attribute.setText(
            str(self.selected_feature.attributes()[self.selected_layer.index_of_cc_roof_c]))

    def corrected(self):
        self.update_feature(self.selected_feature, status='Corrected')
        self.selected_feature = self.selected_layer.get_next_feature()
        zoom_to_a_feature(self.selected_feature)

        self.lbl_current_attribute.setText(
            str(self.selected_feature.attributes()[self.selected_layer.index_of_cc_roof_c]))

    def delete(self):
        self.update_feature(self.selected_feature, status='Deleted')
        self.selected_feature = self.selected_layer.get_next_feature()
        zoom_to_a_feature(self.selected_feature)

        self.lbl_current_attribute.setText(
            str(self.selected_feature.attributes()[self.selected_layer.index_of_cc_roof_c]))

    def skip(self):
        self.update_feature(self.selected_feature, status='Skipped')
        self.selected_feature = self.selected_layer.get_next_feature()
        zoom_to_a_feature(self.selected_feature)

        self.lbl_current_attribute.setText(
            str(self.selected_feature.attributes()[self.selected_layer.index_of_cc_roof_c]))

    def zoom_to_current_feature(self):
        zoom_to_a_feature(self.selected_feature)
        self.selected_layer.layer.removeSelection()
        self.selected_layer.layer.select(self.selected_feature.id())

    def update_feature(self, feature, status):
        current_time = datetime.datetime.now()
        if self.selected_layer.layer.isEditable():
            # Fix for if the layer is is edit mode already
            print("Editing feature")
            self.selected_layer.layer.changeAttributeValue(feature.id(),
                                                           self.selected_layer.index_of_cc_status, status)
            self.selected_layer.layer.changeAttributeValue(feature.id(),
                                                           self.selected_layer.index_of_cc_time, str(current_time))
        else:
            with edit(self.selected_layer.layer):
                print("Editing feature")
                self.selected_layer.layer.changeAttributeValue(feature.id(),
                                                               self.selected_layer.index_of_cc_status, status)
                self.selected_layer.layer.changeAttributeValue(feature.id(),
                                                               self.selected_layer.index_of_cc_time, str(current_time))

    def skip_feature(self, feature):
        with edit(self.selected_layer.layer):
            print("Verifying feature")
            self.selected_layer.layer.changeAttributeValue(feature.id(),
                                                           self.selected_layer.index_of_cc_status, 'Skipped')



class SelectedLayer:

    def __init__(self, layer):
        self.layer = layer

        self._field_names = None

        self.features = self.layer.getFeatures(""" "cc_status" IS NULL or "cc_status" = 'Skipped' """)

        # self.index_of_verified = None
        # self.index_of_modified = None
        # self.index_of_modifiedby = None
        # self.index_of_skipped = None
        self.index_of_cc_status = None
        self.index_of_cc_time = None
        self.index_of_cc_roof_c = None

        self.index_roof_t = None
        self.index_roof_c = None
        self.index_roof_m = None

    @property
    def field_names(self):
        if self._field_names is None:
            self._field_names = [field.name() for field in self.layer.fields()]
        return self._field_names

    def validate(self):
        # Get Layer provider
        layer_provider = self.layer.dataProvider()

        # Add validation fields if not present
        # valid_fields = ['verified', 'modified', 'modifiedby', 'skipped']
        valid_fields = ['cc_status', 'cc_time', 'cc_roof_c']
        for valid_field in valid_fields:
            if valid_field not in self.field_names:
                print(f"{valid_field} not found in {self.field_names} | Adding")

                layer_provider.addAttributes([QgsField(valid_field, QVariant.String)])

        self.layer.updateFields()

    def read_indexes(self):
        # self.index_roof_t = self.layer.fields().indexOf('Roof_T')
        # self.index_roof_c = self.layer.fields().indexOf('Roof_C')
        # self.index_roof_m = self.layer.fields().indexOf('Roof_M')

        self.index_of_cc_status = self.layer.fields().indexOf('cc_status')
        self.index_of_cc_time = self.layer.fields().indexOf('cc_time')
        self.index_of_cc_roof_c = self.layer.fields().indexOf('cc_roof_c')

        # self.index_of_verified = self.layer.fields().indexOf('verified')
        # self.index_of_modified = self.layer.fields().indexOf('modified')
        # self.index_of_modifiedby = self.layer.fields().indexOf('modifiedby')
        # self.index_of_skipped = self.layer.fields().indexOf('skipped')

    def get_next_feature(self):
        feature = next(self.features)
        print(f"Selecting feature: {feature.id()}")
        self.layer.removeSelection()
        self.layer.select(feature.id())
        self.layer.triggerRepaint()
        return feature

    def enable_labels(self):
        layer_settings = QgsPalLayerSettings()
        # text_format = QgsTextFormat()
        #
        # text_format.setFont(QFont("Arial", 12))
        # text_format.setSize(12)
        #
        # buffer_settings = QgsTextBufferSettings()
        # buffer_settings.setEnabled(True)
        # buffer_settings.setSize(1)
        # buffer_settings.setColor(QColor("white"))
        #
        # text_format.setBuffer(buffer_settings)
        # layer_settings.setFormat(text_format)

        layer_settings.fieldName = "cc_status"
        # layer_settings.isExpression = True
        # layer_settings.placement = 2

        layer_settings.enabled = True

        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
        self.layer.setLabelsEnabled(True)
        self.layer.setLabeling(layer_settings)
        self.layer.triggerRepaint()


def zoom_to_a_feature(feature):
    canvas = iface.mapCanvas()

    bbox = feature.geometry().buffer(10, -1).boundingBox()
    print(bbox)

    canvas.setExtent(bbox)
    # canvas.zoomScale(850)
    canvas.refresh()
